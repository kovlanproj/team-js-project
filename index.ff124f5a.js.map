{"mappings":"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","sources":["src/index.js","src/js/local-storage.js"],"sourcesContent":["import MovieApiService from './js/movie-service';\nimport Notiflix from 'notiflix';\nimport Pagination from 'tui-pagination';\nimport 'tui-pagination/dist/tui-pagination.min.css';\nimport pagination from './js/tui-pagination';\nimport genre from './genres.json';\nimport MovieApiService from './js/movie-service';\nimport {\n  saveInputLocalStorage,\n  savePaginationLocalStorage,\n  parseInputLocalStorege,\n  parsePaginationLocalStorage,\n} from './js/local-storage';\n\nimport { auth } from './js/firebase/auth';\nimport { onAuthStateChanged } from 'firebase/auth';\nimport {\n  onShowAuthModal,\n  formBackdropRef,\n  onClickBackdrop,\n} from './js/auth/login-form';\nimport {\n  addAuthBtns,\n  removeAuthBtns,\n  addNav,\n  removeNav,\n  renderNav,\n  addLogOutButton,\n} from './js/auth/auth-nav';\nimport { showInfoModal } from './js/model-info-film';\nimport refs from './js/refs';\n\nrenderNav('index');\n\nconst loginBtnRef = document.querySelector('#modal-btn-auth');\nif (loginBtnRef) {\n  loginBtnRef.addEventListener('click', onShowAuthModal);\n}\nformBackdropRef.addEventListener('click', onClickBackdrop);\n\nlet filmName = '';\n\n// const refs = {\n//   paginationList: document.querySelector('.tui-pagination'),\n//   form: document.querySelector('.input__wraper'),\n//   input: document.querySelector('.header__input'),\n//   cardList: document.querySelector('.films__list'),\n//   selectedPage: document.querySelector('.tui-is-selected'),\n//   infoModal: document.querySelector('.modal-holder'),\n//   modalBtnWrap: document.querySelector('.modal-btn-wrap'),\n//   filmsContainer: document.querySelector('.loader-container'),\n// };\n\nconst api = new MovieApiService();\n\nrefs.form.addEventListener('submit', onSubmitClick);\nrefs.paginationList.addEventListener('click', onClickBtnPagination);\nrefs.input.addEventListener('input', returnPopularFilms);\nrefs.input.value = parseInputLocalStorege();\n\npopularNessesaryFilm(refs.input.value);\n\nfunction popularNessesaryFilm(inputVal) {\n  if (inputVal !== '') {\n    saveInputLocalStorage(refs.input.value);\n\n    murkupSearchMovie(\n      parseInputLocalStorege(),\n      parsePaginationLocalStorage() || api.getStartPage()\n    );\n    pagination.reset();\n    return;\n  }\n  fetchPopularFilms(parsePaginationLocalStorage() || api.getStartPage());\n  return;\n}\n\nfunction returnPopularFilms(evt) {\n  saveInputLocalStorage(evt.target.value);\n  const inputValue = evt.target.value;\n  if (inputValue === '' || parseInputLocalStorege() === null) {\n    savePaginationLocalStorage(1);\n    fetchPopularFilms(1);\n  }\n}\n\nfunction onSubmitClick(event) {\n  event.preventDefault();\n  api.resetPage();\n  pagination.reset();\n  savePaginationLocalStorage(api.getStartPage());\n\n  const searchQuery = event.currentTarget.elements.searchQuery.value\n    .trim()\n    .toLowerCase();\n\n  if (!searchQuery) {\n    Notiflix.Notify.failure('Enter the name of the movie!', {\n      position: 'center-top',\n      fontFamily: 'inherit',\n      borderRadius: '25px',\n      clickToClose: true,\n    });\n    return;\n  }\n  return murkupSearchMovie(searchQuery || refs.input.value);\n}\n\nfunction onClickBtnPagination() {\n  api.page = pagination.getCurrentPage();\n  savePaginationLocalStorage(api.page);\n  window.scrollTo({\n    top: 0,\n    left: 0,\n    behavior: 'smooth',\n  });\n\n  if (refs.input.value === '') {\n    return fetchPopularFilms(parsePaginationLocalStorage());\n  }\n  return murkupSearchMovie(\n    parseInputLocalStorege(),\n    parsePaginationLocalStorage()\n  );\n}\n\nfunction fetchPopularFilms(page) {\n  api.setContainerRef(refs.filmsContainer);\n  api.setPage(parsePaginationLocalStorage() || api.getStartPage());\n  api\n    .getMoviesList()\n    .then(({ results, total_pages }) => {\n      refs.filmsContainer.innerHTML = '';\n      api.resetContainerRef();\n      pagination.reset(total_pages * 10);\n      createFilmCardMarkup(results);\n      pagination.movePageTo(page);\n    })\n    .catch(console.log);\n}\n\nfunction murkupSearchMovie(filmName, page) {\n  api.setContainerRef(refs.filmsContainer);\n  api.setPage(parsePaginationLocalStorage() || api.getStartPage());\n  api\n    .getMovie(filmName)\n    .then(({ results, total_pages }) => {\n      refs.filmsContainer.innerHTML = '';\n      api.resetContainerRef();\n      pagination.reset(total_pages * 10);\n      if (results.length === 0) {\n        Notiflix.Notify.failure(\n          'Search result not successful. Enter the correct movie name and',\n          {\n            position: 'center-top',\n            fontFamily: 'inherit',\n            borderRadius: '25px',\n            clickToClose: true,\n          }\n        );\n\n        // searchQuery = '';\n        return;\n      }\n      createFilmCardMarkup(results);\n      pagination.movePageTo(page || api.resetPage());\n    })\n    .catch(console.log);\n}\n\nfunction createFilmCardMarkup(films) {\n  api.isLibrary = false;\n  const newMarkup = films\n    .map(film => {\n      const {\n        original_title,\n        poster_path,\n        vote_average,\n        release_date,\n        genre_ids,\n        id,\n      } = film;\n      const year = new Date(release_date).getFullYear();\n      return `<li data-id=\"${id}\" class=\"card film-card\">\n                        <div class=\"film-card__img-wrap\">\n                            <img\n                                class=\"film-card__img\"\n                                src=${fetchFilmPhoto(poster_path)}\n                                alt=\"Poster to movie\"\n                                width=\"395\"\n                                height=\"574\"\n                            />\n                        </div>\n                        <div class=\"film-card__wrap\">\n                            <h2 class=\"film-card__title\">${original_title}</h2>\n                            <div class=\"film-card__wrapper\">\n                                <span class=\"film-card__info\">${getGenres(\n                                  genre_ids\n                                ).join(', ')} | ${year}</span>\n                                <span data-film-rating class=\"film-card__rating\">${vote_average.toFixed(\n                                  2\n                                )}</span>\n                            </div>\n                        </div>\n                    </li>`;\n    })\n    .join('');\n  refs.cardList.innerHTML = newMarkup;\n\n  refs.cardList.addEventListener('click', event => {\n    const card = event.target.closest('li');\n    if (card) {\n      const cardId = card.getAttribute('data-id');\n      showInfoModal(api, cardId);\n    }\n  });\n}\n\nfunction fetchFilmPhoto(posterPath) {\n  const noPosterAvaliable =\n    'https://www.reelviews.net/resources/img/default_poster.jpg';\n\n  return posterPath\n    ? `https://image.tmdb.org/t/p/w500${posterPath}`\n    : noPosterAvaliable;\n}\n\nfunction getGenres(ids) {\n  let newArray = [];\n  for (let i = 0; i < ids.length; i += 1) {\n    genre.genres.find(({ id, name }) => {\n      if (id === ids[i]) {\n        newArray.push(name);\n      }\n    });\n  }\n  if (newArray.length > 2) {\n    newArray.splice(2, 3, 'Other');\n  }\n  return newArray;\n}\n\nonAuthStateChanged(auth, user => {\n  if (user) {\n    const uid = user.uid;\n    localStorage.setItem('auth', '1');\n    removeAuthBtns();\n    addNav('index');\n    addLogOutButton();\n  } else {\n    console.log('User is signed out');\n    localStorage.setItem('auth', '0');\n    addAuthBtns();\n    removeNav();\n    document\n      .querySelector('#modal-btn-auth')\n      .addEventListener('click', onShowAuthModal);\n  }\n  // refs.modalBtnWrap.innerHTML =\n  //   '<button type=\"button\" class=\"modal-btn js-login-modal-btn\">To add movie to list, please LogIn</button>';\n  // refs.modalBtnWrap\n  //   .querySelector('.js-login-modal-btn')\n  //   .addEventListener('click', onShowAuthModal);\n});\n\n// const api = new MovieApiService();\n\n// api.getMoviesList().then(console.log);\n// api.getMovie('bullet').then(console.log);\n// api.getMovieInfo('913290').then(console.log);\n// api.getMovieTrailers('913290').then(console.log);\n// \".read\": \"now < 1669068000000\",  // 2022-11-22\n//     \".write\": \"now < 1669068000000\",  // 2022-11-22\n","export function saveInputLocalStorage(query) {\n    localStorage.setItem('loc', JSON.stringify(query));\n}\n\nexport function parseInputLocalStorege() {\n    return JSON.parse(localStorage.getItem('loc'));\n}\n\nexport function savePaginationLocalStorage(page) {\n    localStorage.setItem('page', JSON.stringify(page));\n}\n\nexport function parsePaginationLocalStorage() {\n    return JSON.parse(localStorage.getItem('page'));\n}"],"names":["$h4uzj","parcelRequire","$3791646d3ae2cee8$export$ce86fa2bc5652613","query","localStorage","setItem","JSON","stringify","$3791646d3ae2cee8$export$671398853989f808","parse","getItem","$3791646d3ae2cee8$export$9ef2537571af44ef","page","$3791646d3ae2cee8$export$d06bec4b5edfecf1","$kuom3","renderNav","$b8f9b7833fa37166$var$loginBtnRef","document","querySelector","addEventListener","$crGj6","onShowAuthModal","formBackdropRef","onClickBackdrop","$b8f9b7833fa37166$var$api","default","$b8f9b7833fa37166$var$fetchPopularFilms","setContainerRef","$4Nugj","filmsContainer","setPage","getStartPage","getMoviesList","then","param","results","total_pages","innerHTML","resetContainerRef","$bX5uF","reset","$b8f9b7833fa37166$var$createFilmCardMarkup","movePageTo","catch","console","log","$b8f9b7833fa37166$var$murkupSearchMovie","filmName1","getMovie","length","resetPage","$parcel$interopDefault","$iU1Pc","Notify","failure","position","fontFamily","borderRadius","clickToClose","films","isLibrary","newMarkup","map","film","posterPath","noPosterAvaliable","original_title","poster_path","vote_average","release_date","genre_ids","id","year","Date","getFullYear","concat","ids","$fKcg4","genres","find","name","i","newArray","push","i1","_loop","splice","$b8f9b7833fa37166$var$getGenres","join","toFixed","cardList","event","card","target","closest","cardId","getAttribute","$lOnjo","showInfoModal","form","preventDefault","searchQuery","currentTarget","elements","value","trim","toLowerCase","input","paginationList","getCurrentPage","window","scrollTo","top","left","behavior","evt","inputVal","$b8f9b7833fa37166$var$popularNessesaryFilm","$3SEMc","onAuthStateChanged","$cO4lv","auth","user","uid","removeAuthBtns","addNav","addLogOutButton","addAuthBtns","removeNav"],"version":3,"file":"index.ff124f5a.js.map"}